//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\kingd\OneDrive\Escritorio\Entrega Lab Construcci√≥n Grupal #2\program.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class programParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PLUS_SIGN=1, DEATH_SIGN=2, OPEN_CURLY=3, CLOSE_CURLY=4, COMMA=5, NAME=6, 
		WS=7, TAB=8, NEW_LINE=9, START_LINE=10;
	public const int
		RULE_program = 0, RULE_family = 1, RULE_single = 2, RULE_couple = 3, RULE_sons = 4, 
		RULE_person = 5;
	public static readonly string[] ruleNames = {
		"program", "family", "single", "couple", "sons", "person"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'#'", "'{'", "'}'", "','", null, "' '", "'\t'", "'\n'", 
		"'\r'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS_SIGN", "DEATH_SIGN", "OPEN_CURLY", "CLOSE_CURLY", "COMMA", 
		"NAME", "WS", "TAB", "NEW_LINE", "START_LINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "program.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static programParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public programParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public programParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY() { return GetToken(programParser.OPEN_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY() { return GetToken(programParser.CLOSE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(programParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FamilyContext[] family() {
			return GetRuleContexts<FamilyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FamilyContext family(int i) {
			return GetRuleContext<FamilyContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprogramVisitor<TResult> typedVisitor = visitor as IprogramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			Match(OPEN_CURLY);
			State = 14;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 13;
				family();
				}
				}
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 18;
			Match(CLOSE_CURLY);
			State = 19;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FamilyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CoupleContext couple() {
			return GetRuleContext<CoupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SonsContext sons() {
			return GetRuleContext<SonsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleContext single() {
			return GetRuleContext<SingleContext>(0);
		}
		public FamilyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_family; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprogramVisitor<TResult> typedVisitor = visitor as IprogramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFamily(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FamilyContext family() {
		FamilyContext _localctx = new FamilyContext(Context, State);
		EnterRule(_localctx, 2, RULE_family);
		try {
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21;
				couple();
				State = 22;
				sons();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 24;
				couple();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 25;
				single();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PersonContext person() {
			return GetRuleContext<PersonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(programParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(programParser.COMMA, i);
		}
		public SingleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprogramVisitor<TResult> typedVisitor = visitor as IprogramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleContext single() {
		SingleContext _localctx = new SingleContext(Context, State);
		EnterRule(_localctx, 4, RULE_single);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			person();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 29;
				Match(COMMA);
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PersonContext[] person() {
			return GetRuleContexts<PersonContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PersonContext person(int i) {
			return GetRuleContext<PersonContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_SIGN() { return GetToken(programParser.PLUS_SIGN, 0); }
		public CoupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_couple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprogramVisitor<TResult> typedVisitor = visitor as IprogramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCouple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CoupleContext couple() {
		CoupleContext _localctx = new CoupleContext(Context, State);
		EnterRule(_localctx, 6, RULE_couple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			person();
			State = 36;
			Match(PLUS_SIGN);
			State = 37;
			person();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SonsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY() { return GetToken(programParser.OPEN_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY() { return GetToken(programParser.CLOSE_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FamilyContext[] family() {
			return GetRuleContexts<FamilyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FamilyContext family(int i) {
			return GetRuleContext<FamilyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(programParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(programParser.COMMA, i);
		}
		public SonsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sons; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprogramVisitor<TResult> typedVisitor = visitor as IprogramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSons(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SonsContext sons() {
		SonsContext _localctx = new SonsContext(Context, State);
		EnterRule(_localctx, 8, RULE_sons);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(OPEN_CURLY);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 40;
				family();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NAME );
			State = 45;
			Match(CLOSE_CURLY);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 46;
				Match(COMMA);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PersonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(programParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEATH_SIGN() { return GetToken(programParser.DEATH_SIGN, 0); }
		public PersonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_person; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IprogramVisitor<TResult> typedVisitor = visitor as IprogramVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPerson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PersonContext person() {
		PersonContext _localctx = new PersonContext(Context, State);
		EnterRule(_localctx, 10, RULE_person);
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				Match(NAME);
				State = 53;
				Match(DEATH_SIGN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '<', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', '\x6', 
		'\x2', '\x11', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x12', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1D', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '!', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '$', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', ',', '\n', '\x6', 
		'\r', '\x6', '\xE', '\x6', '-', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x32', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x35', '\v', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', ':', '\n', '\a', '\x3', '\a', 
		'\x2', '\x2', '\b', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', 
		'\x2', '<', '\x2', '\xE', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\x1E', '\x3', '\x2', '\x2', '\x2', '\b', 
		'%', '\x3', '\x2', '\x2', '\x2', '\n', ')', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x39', '\x3', '\x2', '\x2', '\x2', '\xE', '\x10', '\a', '\x5', 
		'\x2', '\x2', '\xF', '\x11', '\x5', '\x4', '\x3', '\x2', '\x10', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', 
		'\a', '\x6', '\x2', '\x2', '\x15', '\x16', '\a', '\x2', '\x2', '\x3', 
		'\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x5', '\b', 
		'\x5', '\x2', '\x18', '\x19', '\x5', '\n', '\x6', '\x2', '\x19', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x1D', '\x5', '\b', '\x5', '\x2', 
		'\x1B', '\x1D', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\"', '\x5', '\f', '\a', '\x2', '\x1F', '!', '\a', '\a', '\x2', 
		'\x2', ' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '$', '\x3', '\x2', 
		'\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', 
		'\x2', '\x2', '\x2', '#', '\a', '\x3', '\x2', '\x2', '\x2', '$', '\"', 
		'\x3', '\x2', '\x2', '\x2', '%', '&', '\x5', '\f', '\a', '\x2', '&', '\'', 
		'\a', '\x3', '\x2', '\x2', '\'', '(', '\x5', '\f', '\a', '\x2', '(', '\t', 
		'\x3', '\x2', '\x2', '\x2', ')', '+', '\a', '\x5', '\x2', '\x2', '*', 
		',', '\x5', '\x4', '\x3', '\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x33', '\a', '\x6', '\x2', '\x2', '\x30', '\x32', '\a', '\a', '\x2', 
		'\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', 
		'\b', '\x2', '\x2', '\x37', ':', '\a', '\x4', '\x2', '\x2', '\x38', ':', 
		'\a', '\b', '\x2', '\x2', '\x39', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x38', '\x3', '\x2', '\x2', '\x2', ':', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x12', '\x1C', '\"', '-', '\x33', '\x39',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
